/* 
 * Copyright (c) 2017 dbradley.
 * Structural changes implemented around flow to interact with new code:
 *
 * Author: Jonathan Lermitage 2016.
 * Contains original code from tikione-coverage authors under WTFPL.
 */
package dbrad.jacocoverage.ide.prefconfig;

import dbrad.jacocofpm.config.Config;
import dbrad.jacocofpm.GlobalsFileMgmt;
import dbrad.jacocofpm.config.GlobalsOfConfig;
import dbrad.jacocoverage.plugin.GlobalsConfig;
import dbrad.jacocoverage.plugin.util.IcoTxtComboBoxRenderer;
import dbrad.jacocofpm.util.NBUtils;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import javax.swing.ButtonGroup;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JRadioButton;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import javax.swing.SwingConstants;
import javax.swing.filechooser.FileFilter;
import org.openide.awt.Mnemonics;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;

/**
 * JaCoCoverage configuration panel.
 *
 * @author Jonathan Lermitage (pre-2017)
 * @author dbradley (2017)
 */
class JaCoCoveragePanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 1L;

    JaCoCoveragePanel(JaCoCoverageOptionsPanelController controller) {
        initComponents();
        try {
            // Add "NetBeans (default)" and "Norway Today (dark)" themes with colors preview.
            jComboBoxColorTheme.setRenderer(new IcoTxtComboBoxRenderer());

            ImageIcon thNetBeansImg = new ImageIcon(GlobalsConfig.toBytes(GlobalsConfig.THEME_ICO_REGULAR));
            ImageIcon thNorwaytoday = new ImageIcon(GlobalsConfig.toBytes(GlobalsConfig.THEME_ICO_NORWAYTODAY));

            thNetBeansImg.setDescription("NetBeans (default)");
            jComboBoxColorTheme.addItem(thNetBeansImg);

            thNorwaytoday.setDescription("Norway Today");
            jComboBoxColorTheme.addItem(thNorwaytoday);

        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
        // <editor-fold defaultstate="collapsed" desc="Tooltips">
        // Warning: background of tooltips is black on Ubuntu. Avoid coloring links with blue.

        // </editor-fold>
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        globalByReportButtonGroup = new ButtonGroup();
        jButtonResoreDefaults = new JButton();
        jCheckBoxEnableHighlighting = new JCheckBox();
        jCheckBoxEnableConsoleReport = new JCheckBox();
        jButtonOnlineHelp = new JButton();
        jCheckBoxEnableHtmlReport = new JCheckBox();
        jCheckBoxOpenHtmlReport = new JCheckBox();
        jLabelColorTheme = new JLabel();
        jComboBoxColorTheme = new JComboBox<>();
        jCheckBoxEnableHighlightingExtended = new JCheckBox();
        jLabelWorkfilesTips = new JLabel();
        jButtonAbout = new JButton();
        jLabelUseBundledJaCoCoJar = new JLabel();
        jCheckBoxUseBundledJaCoCoJar = new JCheckBox();
        jTextFieldUseCustomJaCoCoJar = new JTextField();
        jLabelUseCustomJaCoCoJar = new JLabel();
        jButtonSelectCustomJaCoCoJar = new JButton();
        jLabelEclemmaWebsite = new JLabel();
        jRadioByProject = new JRadioButton();
        jRadioByGrouped = new JRadioButton();
        jCheckBoxRetainXmlFile = new JCheckBox();

        jButtonResoreDefaults.setIcon(new ImageIcon(getClass().getResource("/dbrad/jacocoverage/plugin/resources/icon/famfamfam_defaults.png"))); // NOI18N
        Mnemonics.setLocalizedText(jButtonResoreDefaults, NbBundle.getMessage(JaCoCoveragePanel.class, "JaCoCoveragePanel.jButtonResoreDefaults.text")); // NOI18N
        jButtonResoreDefaults.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonResoreDefaultsActionPerformed(evt);
            }
        });

        Mnemonics.setLocalizedText(jCheckBoxEnableHighlighting, NbBundle.getMessage(JaCoCoveragePanel.class, "JaCoCoveragePanel.jCheckBoxEnableHighlighting.text")); // NOI18N
        jCheckBoxEnableHighlighting.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jCheckBoxEnableHighlightingActionPerformed(evt);
            }
        });

        Mnemonics.setLocalizedText(jCheckBoxEnableConsoleReport, NbBundle.getMessage(JaCoCoveragePanel.class, "JaCoCoveragePanel.jCheckBoxEnableConsoleReport.text")); // NOI18N

        jButtonOnlineHelp.setIcon(new ImageIcon(getClass().getResource("/dbrad/jacocoverage/plugin/resources/icon/famfamfam_help.png"))); // NOI18N
        Mnemonics.setLocalizedText(jButtonOnlineHelp, NbBundle.getMessage(JaCoCoveragePanel.class, "JaCoCoveragePanel.jButtonOnlineHelp.text")); // NOI18N
        jButtonOnlineHelp.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonOnlineHelpActionPerformed(evt);
            }
        });

        Mnemonics.setLocalizedText(jCheckBoxEnableHtmlReport, NbBundle.getMessage(JaCoCoveragePanel.class, "JaCoCoveragePanel.jCheckBoxEnableHtmlReport.text")); // NOI18N
        jCheckBoxEnableHtmlReport.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jCheckBoxEnableHtmlReportActionPerformed(evt);
            }
        });

        Mnemonics.setLocalizedText(jCheckBoxOpenHtmlReport, NbBundle.getMessage(JaCoCoveragePanel.class, "JaCoCoveragePanel.jCheckBoxOpenHtmlReport.text")); // NOI18N

        Mnemonics.setLocalizedText(jLabelColorTheme, NbBundle.getMessage(JaCoCoveragePanel.class, "JaCoCoveragePanel.jLabelColorTheme.text")); // NOI18N

        Mnemonics.setLocalizedText(jCheckBoxEnableHighlightingExtended, NbBundle.getMessage(JaCoCoveragePanel.class, "JaCoCoveragePanel.jCheckBoxEnableHighlightingExtended.text")); // NOI18N

        jLabelWorkfilesTips.setBackground(new Color(255, 255, 255));
        jLabelWorkfilesTips.setIcon(new ImageIcon(getClass().getResource("/dbrad/jacocoverage/plugin/resources/icon/famfamfam_information.png"))); // NOI18N
        Mnemonics.setLocalizedText(jLabelWorkfilesTips, NbBundle.getMessage(JaCoCoveragePanel.class, "JaCoCoveragePanel.jLabelWorkfilesTips.text")); // NOI18N
        jLabelWorkfilesTips.setVerticalAlignment(SwingConstants.TOP);
        jLabelWorkfilesTips.setVerticalTextPosition(SwingConstants.TOP);

        jButtonAbout.setIcon(new ImageIcon(getClass().getResource("/dbrad/jacocoverage/plugin/resources/icon/famfamfam_information.png"))); // NOI18N
        Mnemonics.setLocalizedText(jButtonAbout, NbBundle.getMessage(JaCoCoveragePanel.class, "JaCoCoveragePanel.jButtonAbout.text")); // NOI18N
        jButtonAbout.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonAboutActionPerformed(evt);
            }
        });

        Mnemonics.setLocalizedText(jLabelUseBundledJaCoCoJar, NbBundle.getMessage(JaCoCoveragePanel.class, "JaCoCoveragePanel.jLabelUseBundledJaCoCoJar.text")); // NOI18N

        Mnemonics.setLocalizedText(jCheckBoxUseBundledJaCoCoJar, NbBundle.getMessage(JaCoCoveragePanel.class, "JaCoCoveragePanel.jCheckBoxUseBundledJaCoCoJar.text")); // NOI18N
        jCheckBoxUseBundledJaCoCoJar.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jCheckBoxUseBundledJaCoCoJarActionPerformed(evt);
            }
        });

        jTextFieldUseCustomJaCoCoJar.setText(NbBundle.getMessage(JaCoCoveragePanel.class, "JaCoCoveragePanel.jTextFieldUseCustomJaCoCoJar.text")); // NOI18N

        Mnemonics.setLocalizedText(jLabelUseCustomJaCoCoJar, NbBundle.getMessage(JaCoCoveragePanel.class, "JaCoCoveragePanel.jLabelUseCustomJaCoCoJar.text")); // NOI18N

        Mnemonics.setLocalizedText(jButtonSelectCustomJaCoCoJar, NbBundle.getMessage(JaCoCoveragePanel.class, "JaCoCoveragePanel.jButtonSelectCustomJaCoCoJar.text")); // NOI18N
        jButtonSelectCustomJaCoCoJar.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonSelectCustomJaCoCoJarActionPerformed(evt);
            }
        });

        jLabelEclemmaWebsite.setForeground(new Color(0, 102, 255));
        Mnemonics.setLocalizedText(jLabelEclemmaWebsite, NbBundle.getMessage(JaCoCoveragePanel.class, "JaCoCoveragePanel.jLabelEclemmaWebsite.text")); // NOI18N
        jLabelEclemmaWebsite.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jLabelEclemmaWebsite.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jLabelEclemmaWebsiteMouseClicked(evt);
            }
        });

        globalByReportButtonGroup.add(jRadioByProject);
        jRadioByProject.setSelected(true);
        Mnemonics.setLocalizedText(jRadioByProject, NbBundle.getMessage(JaCoCoveragePanel.class, "JaCoCoveragePanel.jRadioByProject.text")); // NOI18N

        globalByReportButtonGroup.add(jRadioByGrouped);
        Mnemonics.setLocalizedText(jRadioByGrouped, NbBundle.getMessage(JaCoCoveragePanel.class, "JaCoCoveragePanel.jRadioByGrouped.text")); // NOI18N

        Mnemonics.setLocalizedText(jCheckBoxRetainXmlFile, NbBundle.getMessage(JaCoCoveragePanel.class, "JaCoCoveragePanel.jCheckBoxRetainXmlFile.text")); // NOI18N

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonAbout)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonOnlineHelp)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonResoreDefaults))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jCheckBoxEnableHighlighting)
                        .addGap(29, 29, 29)
                        .addComponent(jLabelColorTheme)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBoxColorTheme, GroupLayout.PREFERRED_SIZE, 238, GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jCheckBoxOpenHtmlReport))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBoxEnableHtmlReport)
                            .addComponent(jCheckBoxEnableConsoleReport)
                            .addComponent(jCheckBoxEnableHighlightingExtended)
                            .addComponent(jCheckBoxRetainXmlFile, GroupLayout.PREFERRED_SIZE, 378, GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabelUseBundledJaCoCoJar)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxUseBundledJaCoCoJar)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelEclemmaWebsite))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jRadioByProject)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioByGrouped)))
                .addContainerGap(119, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelUseCustomJaCoCoJar)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldUseCustomJaCoCoJar)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSelectCustomJaCoCoJar)
                        .addGap(31, 31, 31))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelWorkfilesTips)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxEnableHighlighting)
                    .addComponent(jLabelColorTheme)
                    .addComponent(jComboBoxColorTheme, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxEnableHighlightingExtended)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioByGrouped)
                    .addComponent(jRadioByProject))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxRetainXmlFile)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxEnableConsoleReport)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxEnableHtmlReport)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxOpenHtmlReport)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxUseBundledJaCoCoJar)
                    .addComponent(jLabelUseBundledJaCoCoJar)
                    .addComponent(jLabelEclemmaWebsite))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldUseCustomJaCoCoJar, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSelectCustomJaCoCoJar)
                    .addComponent(jLabelUseCustomJaCoCoJar))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(jLabelWorkfilesTips, GroupLayout.PREFERRED_SIZE, 41, GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonResoreDefaults)
                    .addComponent(jButtonOnlineHelp)
                    .addComponent(jButtonAbout)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonResoreDefaultsActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonResoreDefaultsActionPerformed
        // grouped by arrangement
        //
        //high-lighting 
        jCheckBoxEnableHighlighting.setSelected(GlobalsOfConfig.DEF_ENABLE_HIGHLIGHT);
        jCheckBoxEnableHighlightingExtended.setSelected(GlobalsOfConfig.DEF_ENABLE_HIGHLIGHTEXTENDED);
        jCheckBoxEnableHighlightingExtended.setEnabled(jCheckBoxEnableHighlighting.isSelected());

        // by-xxxxx-report radio group settings (project is the default choice)
        jRadioByProject.setSelected(GlobalsOfConfig.DEF_RADIO_BY_PROJECT_REPORT);

        // console report
        jCheckBoxEnableConsoleReport.setSelected(GlobalsOfConfig.DEF_ENABLE_CONSOLE_REPORT);

        // html reports
        jCheckBoxEnableHtmlReport.setSelected(GlobalsOfConfig.DEF_ENABLE_HTML_REPORT);
        jCheckBoxOpenHtmlReport.setSelected(GlobalsOfConfig.DEF_AUTOOPEN_HTML_REPORT);
        jCheckBoxOpenHtmlReport.setEnabled(jCheckBoxEnableHtmlReport.isSelected());

        jComboBoxColorTheme.setSelectedIndex(GlobalsOfConfig.DEF_THEME);
        jComboBoxColorTheme.setEnabled(jCheckBoxEnableHighlighting.isSelected());

        jCheckBoxUseBundledJaCoCoJar.setSelected(!GlobalsFileMgmt.DEF_USE_CUSTOM_JACOCO_JAR);
        jTextFieldUseCustomJaCoCoJar.setText(GlobalsFileMgmt.DEF_CUSTOM_JACOCO_JAR_PATH);
        
        jTextFieldUseCustomJaCoCoJar.setEnabled(!jCheckBoxUseBundledJaCoCoJar.isSelected());
        jButtonSelectCustomJaCoCoJar.setEnabled(!jCheckBoxUseBundledJaCoCoJar.isSelected());
        
        jLabelUseCustomJaCoCoJar.setEnabled(!jCheckBoxUseBundledJaCoCoJar.isSelected());
    }//GEN-LAST:event_jButtonResoreDefaultsActionPerformed

    private void jButtonOnlineHelpActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonOnlineHelpActionPerformed
        NBUtils.extBrowser("https://github.com/DaveBrad/dbrad-jacocoverage/blob/master/README.md");
    }//GEN-LAST:event_jButtonOnlineHelpActionPerformed

    private void jCheckBoxEnableHtmlReportActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jCheckBoxEnableHtmlReportActionPerformed
        jCheckBoxOpenHtmlReport.setEnabled(jCheckBoxEnableHtmlReport.isSelected());
    }//GEN-LAST:event_jCheckBoxEnableHtmlReportActionPerformed

    private void jCheckBoxEnableHighlightingActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jCheckBoxEnableHighlightingActionPerformed
        jComboBoxColorTheme.setEnabled(jCheckBoxEnableHighlighting.isSelected());
        jCheckBoxEnableHighlightingExtended.setEnabled(jCheckBoxEnableHighlighting.isSelected());
    }//GEN-LAST:event_jCheckBoxEnableHighlightingActionPerformed

    private void jButtonAboutActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonAboutActionPerformed
        AboutDialog about = new AboutDialog(null, true);
        about.setVisible(true);
    }//GEN-LAST:event_jButtonAboutActionPerformed

    private void jCheckBoxUseBundledJaCoCoJarActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jCheckBoxUseBundledJaCoCoJarActionPerformed
        boolean selected = jCheckBoxUseBundledJaCoCoJar.isSelected();
        
        jTextFieldUseCustomJaCoCoJar.setEnabled(!selected);
        jTextFieldUseCustomJaCoCoJar.setEditable(!selected);
        jButtonSelectCustomJaCoCoJar.setEnabled(!selected);
        
        jLabelUseCustomJaCoCoJar.setEnabled(!selected);
    }//GEN-LAST:event_jCheckBoxUseBundledJaCoCoJarActionPerformed

    private void jButtonSelectCustomJaCoCoJarActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonSelectCustomJaCoCoJarActionPerformed
        JFileChooser dialogue = new JFileChooser();
        dialogue.setMultiSelectionEnabled(false);
        dialogue.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        dialogue.setAcceptAllFileFilterUsed(false);
        dialogue.setFileFilter(new FileFilter() {

            @Override
            public boolean accept(File f) {
                return f.getName().toUpperCase().endsWith(".JAR") || f.isDirectory();
            }

            @Override
            public String getDescription() {
                return "JaCoCo jacocoagent jar file (.jar)";
            }
        });
        if (dialogue.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File javaagentFile = dialogue.getSelectedFile();
            if (javaagentFile != null && javaagentFile.isFile()) {
                jTextFieldUseCustomJaCoCoJar.setText(javaagentFile.getAbsolutePath());
            }
        }
    }//GEN-LAST:event_jButtonSelectCustomJaCoCoJarActionPerformed

    private void jLabelEclemmaWebsiteMouseClicked(MouseEvent evt) {//GEN-FIRST:event_jLabelEclemmaWebsiteMouseClicked
        NBUtils.extBrowser("http://www.eclemma.org/jacoco/");
    }//GEN-LAST:event_jLabelEclemmaWebsiteMouseClicked

    /**
     * Load user preferences and configure UI.
     */
    void load() {
        Config.sync();
        jCheckBoxEnableHighlighting.setSelected(Config.isCfgHighlighting());
        jCheckBoxEnableHighlightingExtended.setSelected(Config.isCfgHighlightingExtended());
        jCheckBoxEnableHighlightingExtended.setEnabled(jCheckBoxEnableHighlighting.isSelected());

        boolean res = Config.isCfgByProjectReport();
        jRadioByProject.setSelected(res);
        jRadioByGrouped.setSelected(!res);

        jCheckBoxEnableConsoleReport.setSelected(Config.isCfgConsoleReport());

        jCheckBoxEnableHtmlReport.setSelected(Config.isCfgHtmlReport());
        jCheckBoxOpenHtmlReport.setSelected(Config.isCfgAutoOpenHtmlReport());
        jCheckBoxOpenHtmlReport.setEnabled(jCheckBoxEnableHtmlReport.isSelected());

        jComboBoxColorTheme.setSelectedIndex(Config.getCfgTheme());
        jComboBoxColorTheme.setEnabled(jCheckBoxEnableHighlighting.isSelected());

        // bundled Jacocoagent setting
        jCheckBoxUseBundledJaCoCoJar.setSelected(!Config.isCfgUseCustomJacocoJar());
        
        jTextFieldUseCustomJaCoCoJar.setEnabled(!jCheckBoxUseBundledJaCoCoJar.isSelected());
        jTextFieldUseCustomJaCoCoJar.setText(Config.getCfgCustomJacocoJarPath());
        jButtonSelectCustomJaCoCoJar.setEnabled(!jCheckBoxUseBundledJaCoCoJar.isSelected());
        
        jLabelUseCustomJaCoCoJar.setEnabled(!jCheckBoxUseBundledJaCoCoJar.isSelected());
    }

    /**
     * Store configuration to user preferences.
     */
    void store() {

        Config.setCfgHighlighting(jCheckBoxEnableHighlighting.isSelected());
        Config.setCfgHighlightingExtended(jCheckBoxEnableHighlightingExtended.isSelected());

        Config.setCfgByProjectReports(jRadioByProject.isSelected());
        
        Config.setCfgRetainXmlFile(jCheckBoxRetainXmlFile.isSelected());

        Config.setCfgConsoleReport(jCheckBoxEnableConsoleReport.isSelected());

        Config.setCfgtmlReport(jCheckBoxEnableHtmlReport.isSelected());
        Config.setCfgOpenHtmlReport(jCheckBoxOpenHtmlReport.isSelected());

        // set this regardless of any checkboxs in the configuration (main preferences)
        Config.setCfgExcludeOrgTestng(true);
        Config.setCfgExcludeOrgJunit(true);
        Config.setCfgExcludeJunitExtension(true);

        Config.setCfgTheme(jComboBoxColorTheme.getSelectedIndex());

        Config.setCfgUseCustomJacocoJar(!jCheckBoxUseBundledJaCoCoJar.isSelected());
        Config.setCfgCustomJacocoJarPath(jTextFieldUseCustomJaCoCoJar.getText());
        Config.flush();
    }

    boolean valid() {
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ButtonGroup globalByReportButtonGroup;
    private JButton jButtonAbout;
    private JButton jButtonOnlineHelp;
    private JButton jButtonResoreDefaults;
    private JButton jButtonSelectCustomJaCoCoJar;
    private JCheckBox jCheckBoxEnableConsoleReport;
    private JCheckBox jCheckBoxEnableHighlighting;
    private JCheckBox jCheckBoxEnableHighlightingExtended;
    private JCheckBox jCheckBoxEnableHtmlReport;
    private JCheckBox jCheckBoxOpenHtmlReport;
    private JCheckBox jCheckBoxRetainXmlFile;
    private JCheckBox jCheckBoxUseBundledJaCoCoJar;
    private JComboBox<Object> jComboBoxColorTheme;
    private JLabel jLabelColorTheme;
    private JLabel jLabelEclemmaWebsite;
    private JLabel jLabelUseBundledJaCoCoJar;
    private JLabel jLabelUseCustomJaCoCoJar;
    private JLabel jLabelWorkfilesTips;
    private JRadioButton jRadioByGrouped;
    private JRadioButton jRadioByProject;
    private JTextField jTextFieldUseCustomJaCoCoJar;
    // End of variables declaration//GEN-END:variables
}

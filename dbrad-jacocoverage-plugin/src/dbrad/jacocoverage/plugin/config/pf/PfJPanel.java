/* Copyright (c) 2017 dbradley. All rights reserved. */
package dbrad.jacocoverage.plugin.config.pf;

import dbrad.jacocofpm.json.Json1ProjLevel;
import dbrad.jacocofpm.json.Json2ProjSrcCodeFolder;
import dbrad.jacocofpm.config.IdeProjectJacocoverageConfig;
import dbrad.jacocofpm.mgr.com.NbProjectJacoco;
import java.io.IOException;
import org.openide.util.Exceptions;

/**
 *
 * @author dbradley
 */
public class PfJPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 0L;

    public NbProjectJacoco nbProjectJacoco;
    private IdeProjectJacocoverageConfig ideProjectConfig;

    /**
     * Creates new form PfJPanel
     */
    public PfJPanel() {
        initComponents();
    }

    public void setProjectConfig(NbProjectJacoco nbProjectJacoco) {
        this.nbProjectJacoco = nbProjectJacoco;
        this.nbProjectJacoco.setAssociateProjectTable(jTablePackageFilter);

        if (nbProjectJacoco.isPrincipleProject()) {
            try {
                this.ideProjectConfig = IdeProjectJacocoverageConfig.reuseForProject(this.nbProjectJacoco.getPrincipleNbProject());

            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }

    /**
     * Load the package-filter table from the JSON configuration file
     * 
     * @param nbProjectJacoco root project to load
     * 
     * @return true if any item was loaded from memory, rather than JSON
     */
    public boolean loadPkgFilterFromJson(NbProjectJacoco nbProjectJacoco) {
        jTablePackageFilter.setupAndBuild(new PfJTableDatum(this.nbProjectJacoco));
        boolean jsonVersusMemory = jTablePackageFilter.loadTableFromProjectJson(ideProjectConfig);
        
        return jsonVersusMemory;
    }

    public void storeToJsonMap() {
        // if the globals are being used then there is no reason to store
        // to JSON for the project
        if(!ideProjectConfig.isProjectSpecific()){
            return;
        }
        
        Json1ProjLevel jsonMap = ideProjectConfig.jsonMapData.getProjectIncludePackages();

        String projNameDisp = this.nbProjectJacoco.getNbProjectDisplayName();

        if (!jsonMap.containsKey(projNameDisp)) {
            jsonMap.put(projNameDisp, new Json2ProjSrcCodeFolder(4));
        }
        Json2ProjSrcCodeFolder json2Map = jsonMap.get(projNameDisp);
        json2Map.clear();

        PfJTableDatum myDatum = (PfJTableDatum) jTablePackageFilter.datum;

        if (myDatum.nbProjectJacoco.isPrincipleProject()) {
            myDatum.nbProjectJacoco.getDependingOnNbProjectsHash().forEach((projectNameKey, nbProjJacoco) -> {
                Json2ProjSrcCodeFolder json2 
                        =((PfJTable) nbProjJacoco.getPfJTable4NbProjectJacoco()).createJson2MapFromProjFilterTable();
                
                jsonMap.put(projectNameKey, json2);

            });
        }
        jsonMap.put(projNameDisp, jTablePackageFilter.createJson2MapFromProjFilterTable());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelSelectPackages = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTablePackageFilter = new dbrad.jacocoverage.plugin.config.pf.PfJTable();

        setPreferredSize(new java.awt.Dimension(671, 400));

        org.openide.awt.Mnemonics.setLocalizedText(jLabelSelectPackages, org.openide.util.NbBundle.getMessage(PfJPanel.class, "PfJPanel.jLabelSelectPackages.text")); // NOI18N

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dbrad/jacocoverage/plugin/resources/icon/famfamfam_information.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(PfJPanel.class, "PfJPanel.jLabel1.text")); // NOI18N
        jLabel1.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        jScrollPane2.setPreferredSize(new java.awt.Dimension(0, 0));

        jTablePackageFilter.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTablePackageFilter.setMaximumSize(new java.awt.Dimension(32000, 32000));
        jTablePackageFilter.setMinimumSize(new java.awt.Dimension(450, 400));
        jTablePackageFilter.setPreferredScrollableViewportSize(new java.awt.Dimension(0, 0));
        jScrollPane2.setViewportView(jTablePackageFilter);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelSelectPackages, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 104, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelSelectPackages)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelSelectPackages;
    private javax.swing.JScrollPane jScrollPane2;
    public dbrad.jacocoverage.plugin.config.pf.PfJTable jTablePackageFilter;
    // End of variables declaration//GEN-END:variables
}
